# Google Cloud Build CI/CD Pipeline - cloudbuild.yaml

```yaml
# Cloud Build configuration for eZunder application
# This pipeline handles building, testing, and deploying both frontend and backend

steps:
  # Step 1: Install dependencies and cache
  - name: 'node:18-alpine'
    id: 'install-dependencies'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Installing dependencies..."
        npm ci --silent
        echo "Dependencies installed successfully"
    dir: '.'
    env:
      - 'NODE_ENV=production'

  # Step 2: Run linting and type checking
  - name: 'node:18-alpine'
    id: 'lint-and-typecheck'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Running linting and type checking..."
        npm run lint:check
        npm run type-check
        echo "Linting and type checking completed"
    dir: '.'
    waitFor: ['install-dependencies']

  # Step 3: Run tests
  - name: 'node:18-alpine'
    id: 'run-tests'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Running tests..."
        npm run test -- --coverage --watchAll=false
        echo "Tests completed successfully"
    dir: '.'
    env:
      - 'CI=true'
      - 'NODE_ENV=test'
    waitFor: ['install-dependencies']

  # Step 4: Build backend application
  - name: 'node:18-alpine'
    id: 'build-backend'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Building backend application..."
        cd apps/backend
        npm ci --silent
        npm run build
        echo "Backend build completed"
    dir: '.'
    waitFor: ['lint-and-typecheck', 'run-tests']

  # Step 5: Build frontend application
  - name: 'node:18-alpine'
    id: 'build-frontend'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Building frontend application..."
        cd apps/frontend
        npm ci --silent
        npm run build
        echo "Frontend build completed"
    dir: '.'
    env:
      - 'VITE_API_URL=${_API_URL}'
      - 'VITE_APP_ENV=production'
    waitFor: ['lint-and-typecheck', 'run-tests']

  # Step 6: Build and push backend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-build-backend'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/ezunder-backend:${SHORT_SHA}'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/ezunder-backend:latest'
      - '-f'
      - 'apps/backend/Dockerfile'
      - 'apps/backend/'
    waitFor: ['build-backend']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-push-backend'
    args:
      - 'push'
      - 'gcr.io/${PROJECT_ID}/ezunder-backend:${SHORT_SHA}'
    waitFor: ['docker-build-backend']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-push-backend-latest'
    args:
      - 'push'
      - 'gcr.io/${PROJECT_ID}/ezunder-backend:latest'
    waitFor: ['docker-build-backend']

  # Step 7: Build and push frontend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-build-frontend'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/ezunder-frontend:${SHORT_SHA}'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/ezunder-frontend:latest'
      - '-f'
      - 'apps/frontend/Dockerfile'
      - 'apps/frontend/'
    waitFor: ['build-frontend']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-push-frontend'
    args:
      - 'push'
      - 'gcr.io/${PROJECT_ID}/ezunder-frontend:${SHORT_SHA}'
    waitFor: ['docker-build-frontend']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-push-frontend-latest'
    args:
      - 'push'
      - 'gcr.io/${PROJECT_ID}/ezunder-frontend:latest'
    waitFor: ['docker-build-frontend']

  # Step 8: Run security scans
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'security-scan-backend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Running security scan for backend..."
        gcloud container images scan gcr.io/${PROJECT_ID}/ezunder-backend:${SHORT_SHA} \
          --format='value(response.scanResults.vulnerabilityCount)' || true
    waitFor: ['docker-push-backend']

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'security-scan-frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Running security scan for frontend..."
        gcloud container images scan gcr.io/${PROJECT_ID}/ezunder-frontend:${SHORT_SHA} \
          --format='value(response.scanResults.vulnerabilityCount)' || true
    waitFor: ['docker-push-frontend']

  # Step 9: Deploy to Cloud Run (Staging)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-backend-staging'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "${BRANCH_NAME}" = "develop" ] || [ "${BRANCH_NAME}" = "staging" ]; then
          echo "Deploying backend to staging..."
          gcloud run deploy ezunder-backend-staging \
            --image gcr.io/${PROJECT_ID}/ezunder-backend:${SHORT_SHA} \
            --region ${_REGION} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 1Gi \
            --cpu 1000m \
            --min-instances 0 \
            --max-instances 10 \
            --set-env-vars NODE_ENV=staging \
            --set-env-vars LOG_LEVEL=info \
            --timeout 300 \
            --concurrency 100
        else
          echo "Skipping staging deployment for branch: ${BRANCH_NAME}"
        fi
    waitFor: ['docker-push-backend', 'security-scan-backend']

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-frontend-staging'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "${BRANCH_NAME}" = "develop" ] || [ "${BRANCH_NAME}" = "staging" ]; then
          echo "Deploying frontend to staging..."
          gcloud run deploy ezunder-frontend-staging \
            --image gcr.io/${PROJECT_ID}/ezunder-frontend:${SHORT_SHA} \
            --region ${_REGION} \
            --platform managed \
            --allow-unauthenticated \
            --port 3000 \
            --memory 512Mi \
            --cpu 500m \
            --min-instances 0 \
            --max-instances 5 \
            --timeout 300 \
            --concurrency 200
        else
          echo "Skipping staging deployment for branch: ${BRANCH_NAME}"
        fi
    waitFor: ['docker-push-frontend', 'security-scan-frontend']

  # Step 10: Deploy to Cloud Run (Production)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-backend-production'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "${BRANCH_NAME}" = "main" ] || [ "${BRANCH_NAME}" = "master" ]; then
          echo "Deploying backend to production..."
          gcloud run deploy ezunder-backend \
            --image gcr.io/${PROJECT_ID}/ezunder-backend:${SHORT_SHA} \
            --region ${_REGION} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 2Gi \
            --cpu 2000m \
            --min-instances 1 \
            --max-instances 50 \
            --set-env-vars NODE_ENV=production \
            --set-env-vars LOG_LEVEL=warn \
            --timeout 300 \
            --concurrency 100
        else
          echo "Skipping production deployment for branch: ${BRANCH_NAME}"
        fi
    waitFor: ['docker-push-backend', 'security-scan-backend']

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-frontend-production'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "${BRANCH_NAME}" = "main" ] || [ "${BRANCH_NAME}" = "master" ]; then
          echo "Deploying frontend to production..."
          gcloud run deploy ezunder-frontend \
            --image gcr.io/${PROJECT_ID}/ezunder-frontend:${SHORT_SHA} \
            --region ${_REGION} \
            --platform managed \
            --allow-unauthenticated \
            --port 3000 \
            --memory 1Gi \
            --cpu 1000m \
            --min-instances 1 \
            --max-instances 20 \
            --timeout 300 \
            --concurrency 200
        else
          echo "Skipping production deployment for branch: ${BRANCH_NAME}"
        fi
    waitFor: ['docker-push-frontend', 'security-scan-frontend']

  # Step 11: Run integration tests
  - name: 'node:18-alpine'
    id: 'integration-tests'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Running integration tests..."
        # Wait for services to be ready
        sleep 30
        
        # Install test dependencies
        npm install -g newman
        
        # Run API integration tests
        if [ -f "tests/integration/api.postman_collection.json" ]; then
          newman run tests/integration/api.postman_collection.json \
            --environment tests/integration/staging.postman_environment.json \
            --reporters cli,json \
            --reporter-json-export integration-test-results.json
        fi
        
        echo "Integration tests completed"
    env:
      - 'CI=true'
    waitFor: ['deploy-backend-staging', 'deploy-frontend-staging']

  # Step 12: Notify deployment status
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'notify-deployment'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deployment completed successfully!"
        echo "Backend SHA: ${SHORT_SHA}"
        echo "Frontend SHA: ${SHORT_SHA}"
        echo "Branch: ${BRANCH_NAME}"
        echo "Build ID: ${BUILD_ID}"
        
        # Send notification to Slack or email (if configured)
        if [ ! -z "${_SLACK_WEBHOOK}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"âœ… eZunder deployment completed successfully!\nBranch: '"${BRANCH_NAME}"'\nSHA: '"${SHORT_SHA}"'\nBuild ID: '"${BUILD_ID}"'"}' \
            ${_SLACK_WEBHOOK} || true
        fi
    waitFor: ['integration-tests']

# Build configuration
options:
  # Use higher-performance machine type for faster builds
  machineType: 'E2_HIGHCPU_8'
  
  # Increase disk size for large builds
  diskSizeGb: 100
  
  # Use Docker layer caching for faster builds
  env:
    - 'DOCKER_BUILDKIT=1'
  
  # Enable build logs streaming
  logging: CLOUD_LOGGING_ONLY
  
  # Set timeout for the entire build
  timeout: '3600s'

# Substitution variables
substitutions:
  _REGION: 'us-central1'
  _API_URL: 'https://api.ezunder.com'
  _SLACK_WEBHOOK: ''

# Images to push to Container Registry
images:
  - 'gcr.io/${PROJECT_ID}/ezunder-backend:${SHORT_SHA}'
  - 'gcr.io/${PROJECT_ID}/ezunder-backend:latest'
  - 'gcr.io/${PROJECT_ID}/ezunder-frontend:${SHORT_SHA}'
  - 'gcr.io/${PROJECT_ID}/ezunder-frontend:latest'

# Build artifacts
artifacts:
  objects:
    location: 'gs://${PROJECT_ID}-build-artifacts'
    paths:
      - 'integration-test-results.json'
      - 'apps/backend/coverage/**/*'
      - 'apps/frontend/coverage/**/*'

# Build triggers configuration
# This section would be configured in the GCP Console or via Terraform/CLI
# Triggers:
# - main/master branch: Deploy to production
# - develop/staging branch: Deploy to staging
# - Pull requests: Run tests only
# - Tag releases: Deploy to production with additional validations
```